{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "deliveryIdName": {
      "metadata": {
        "description": "Name of the delivery managed identity"
      },
      "type": "string"
    },
    "deliveryPrincipalId": {
      "metadata": {
        "description": "Principal id for the delivery managed identity"
      },
      "type": "string"
    },
    "droneSchedulerIdName": {
      "metadata": {
        "description": "Name of the drone scheduler managed identity"
      },
      "type": "string"
    },
    "droneSchedulerPrincipalId": {
      "metadata": {
        "description": "Principal id for the drone scheduler managed identity"
      },
      "type": "string"
    },
    "packageIdName": {
      "metadata": {
        "description": "Name of the package managed identity"
      },
      "type": "string"
    },
    "packagePrincipalId": {
      "metadata": {
        "description": "Principal id for the workflow managed identity"
      },
      "type": "string"
    },
    "sshRSAPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH RSA public key string.  Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    },
    "servicePrincipalClientId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider"
      },
      "type": "string"
    },
    "servicePrincipalId": {
      "metadata": {
        "description": "Principal ID (used by cloudprovider)"
      },
      "type": "string"
    },
    "servicePrincipalClientSecret": {
      "defaultValue": "SERVICE_PRINCIPAL_CLIENT_ID",
      "type": "securestring"
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100 (note, for Kubernetes clusters you will also get 1 or 2 public agents in addition to these seleted masters)"
      },
      "minValue": 1,
      "maxValue": 100
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "osType": {
      "type": "string",
      "defaultValue": "Linux",
      "allowedValues": [
        "Linux"
      ],
      "metadata": {
        "description": "The type of operating system."
      }
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
      },
      "minValue": 0,
      "maxValue": 1023
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Linux Virtual Machines."
      },
      "defaultValue": "azureuser"
    },
    "kubernetesVersion": {
      "type": "string",
      "metadata": {
        "description": "The version of Kubernetes. It must be supported in the target location."
      }
    },
    "deliveryRedisStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS"
      ],
      "metadata": {
        "description": "Type of the storage account that will store Redis Cache."
      }
    },
    "deliveryRedisDiagnosticsEnabled": {
      "type": "bool",
      "allowedValues": [
        false,
        true
      ],
      "defaultValue": false,
      "metadata": {
        "description": "A value that indicates whether diagnostics should be saved to the specified storage account."
      }
    }
  },
  "variables": {
    "appInsightsName": "[concat('ai',uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
    "aksClusterName": "[concat('aks',uniqueString(variables('clusterNamePrefix'), resourceGroup().id))]",
    "clusterNamePrefix": "aks",
    "acrNamePrefix": "acr",
    "aiNamePrefix": "ai",
    "acrName": "[concat('acr',uniqueString(variables('acrNamePrefix'),resourceGroup().id))]",
    "readerRoleObjectId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
    "managedIdentityOperatorRoleObjectId": "f1a07417-d97a-45cb-824c-7a7467783830",
    "readerRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('readerRoleObjectId'))]",
    "managedIdentityOperatorRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('managedIdentityOperatorRoleObjectId'))]",
    "deliveryRedisStorageName": "[concat('rsto',uniqueString(resourceGroup().id))]",
    "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
    "deliveryRedisCacheSKU": "Basic",
    "deliveryRedisCacheFamily": "C",
    "deliveryRedisCacheCapacity": 0,
    "deliveryCosmosDbName": "[concat('deliverycosmosdb', uniqueString(resourceGroup().id))]",
    "deliveryRedisName": "[concat('deliveryredis',uniqueString(resourceGroup().id))]",
    "deliveryKeyVaultName": "[concat('deliverykeyvault',uniqueString(resourceGroup().id))]",
    "packageCosmosDbName": "[concat('packageCosmosdb',uniqueString(resourceGroup().id))]",
    "ingestionServiceAccessKey": "ingestionServiceAccessKey",
    "droneSchedulerKeyVaultName": "[concat('droneschedulerkeyvault',uniqueString(resourceGroup().id))]",
    "packageKeyVaultName": "[concat('packagekeyvault',uniqueString(resourceGroup().id))]",
    "packageServiceAccessKey": "packageServiceAccessKey"

  },
  "resources": [
    {
      "name": "[variables('acrName')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2017-10-01",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Container Registry",
        "container.registry": "[variables('acrName')]",
        "clusterName": "[variables('aksClusterName')]"
      },
      "properties": {
        "adminUserEnabled": false
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
      "name": "[concat(variables('acrName'),'/Microsoft.Authorization/',guid(concat('aks',variables('acrName'), resourceGroup().id)))]",
      "apiVersion": "2017-05-01",
      "comments": "Grant the AKS cluster access to the ACR instance",
      "tags": {
        "displayName": "AKS SP RBAC Access to ACR",
        "what": "rbac",
        "to": "cluster",
        "identity-type": "sp",
        "access": "acr",
        "reason": "pull-images"
      },
      "properties": {
        "roleDefinitionId": "[variables('readerRoleId')]",
        "principalId": "[parameters('servicePrincipalId')]",
        "scope": "[concat(subscription().id, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ContainerRegistry/registries/',variables('acrName'))]"
      },
      "dependsOn": [
        "[concat(subscription().id, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ContainerRegistry/registries/',variables('acrName'))]"
      ]
    },
    {
      "name": "[variables('aksClusterName')]",
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2018-03-31",
      "location": "[resourceGroup().location]",
      "tags": {
        "environment": "shared cluster"
      },
      "properties": {
        "kubernetesVersion": "[parameters('kubernetesVersion')]",
        "dnsPrefix": "[variables('aksClusterName')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
            "count": "[parameters('agentCount')]",
            "vmSize": "[parameters('agentVMSize')]",
            "osType": "[parameters('osType')]",
            "storageProfile": "ManagedDisks"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshRSAPublicKey')]"
              }
            ]
          }
        },
        "servicePrincipalProfile": {
          "clientId": "[parameters('servicePrincipalClientId')]",
          "secret": "[parameters('servicePrincipalClientId')]"
        },
        "enableRBAC": true
      }
    },

    {
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "kind": "other",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "App Insights instance - Distributed Tracing",
        "environment": "choreography"
      },
      "properties": {
        "Application_Type": "other"
      }
    },
    {
      "name": "[variables('deliveryRedisStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used by Delivery Redis",
      "dependsOn": [],
      "tags": {
        "displayName": "Storage account for inflight deliveries",
        "app": "fabrikam-delivery",
        "environment": "choreography"
      },
      "properties": {
        "accountType": "[parameters('deliveryRedisStorageType')]"
      }
    },
    {
      "apiVersion": "2018-03-01",
      "name": "[variables('deliveryRedisName')]",
      "type": "Microsoft.Cache/Redis",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Redis Cache for inflight deliveries",
        "app": "fabrikam-delivery",
        "environment": "choreography"
      },
      "dependsOn": [
        "[variables('deliveryRedisStorageId')]"
      ],
      "properties": {
        "redisEnableNonSslPort": "false",
        "sku": {
          "capacity": "[variables('deliveryRedisCacheCapacity')]",
          "family": "[variables('deliveryRedisCacheFamily')]",
          "name": "[variables('deliveryRedisCacheSKU')]"
        }
      }
    },

    {
      "apiVersion": "2017-05-01-preview",
      "type": "Microsoft.Cache/redis/providers/diagnosticsettings",
      "name": "[concat(variables('deliveryRedisName'), '/Microsoft.Insights/', variables('deliveryRedisName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Cache/Redis', variables('deliveryRedisName'))]"
      ],
      "properties": {
        "storageAccountId": "[variables('deliveryRedisStorageId')]",
        "logs": [],
        "metrics": [
          {
            "timeGrain": "AllMetrics",
            "enabled": "[parameters('deliveryRedisDiagnosticsEnabled')]",
            "retentionPolicy": {
              "days": 90,
              "enabled": "[parameters('deliveryRedisDiagnosticsEnabled')]"
            }
          }
        ]
      }
    },

    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('deliveryCosmosDbName')]",
      "apiVersion": "2016-03-31",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Delivery Cosmos Db",
        "app": "fabrikam-delivery",
        "environment": "choreography"
      },
      "properties": {
        "name": "[variables('deliveryCosmosDbName')]",
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "failoverPriority": 0
          }
        ]
      }
    },

    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('packageCosmosDbName')]",
      "apiVersion": "2016-03-31",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Package Cosmos Db",
        "app": "fabrikam-package",
        "environment": "choreography"
      },
      "properties": {
        "name": "[variables('packageCosmosDbName')]",
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "failoverPriority": 0
          }
        ]
      }
    },

    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('deliveryKeyVaultName')]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('deliveryRedisStorageId')]"
      ],
      "tags": {
        "displayName": "Delivery Key Vault",
        "app": "fabrikam-delivery",
        "environment": "choreography"
      },
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('deliveryPrincipalId')]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[variables('readerRoleObjectId')]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      }
    },

    {
      "type": "secrets",
      "name": "CosmosDB-Endpoint",
      "apiVersion": "2015-06-01",
      "properties": {
        "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('deliveryCosmosDbName')).documentEndpoint)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryKeyVaultName'))]",
        "[resourceId('Microsoft.Cache/Redis', 'deliveryRedisName')]"
      ]
    },
    {
      "type": "secrets",
      "name": "CosmosDB-Key",
      "apiVersion": "2015-06-01",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('deliveryCosmosDbName')), '2016-03-31').primaryMasterKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', 'deliveryKeyVaultName')]",
        "[resourceId('Microsoft.Cache/Redis', 'deliveryRedisName')]"
      ]
    },
    {
      "type": "secrets",
      "name": "Redis-Endpoint",
      "apiVersion": "2015-06-01",
      "properties": {
        "value": "[reference(resourceId('Microsoft.Cache/Redis', variables('deliveryRedisName')).hostName)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryKeyVaultName'))]",
        "[resourceId('Microsoft.Cache/Redis', variables('deliveryRedisName'))]"
      ]
    },
    {
      "type": "secrets",
      "name": "Redis-AccessKey",
      "apiVersion": "2015-06-01",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('deliveryRedisName')), '2016-04-01').primaryKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryKeyVaultName'))]",
        "[resourceId('Microsoft.Cache/Redis', variables('deliveryRedisName'))]"
      ]
    },
    {
      "type": "secrets",
      "name": "ApplicationInsights--InstrumentationKey",
      "apiVersion": "2015-06-01",
      "properties": {
        "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'),'2015-05-01').InstrumentationKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('deliveryKeyVaultName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ]
    }


  ]
}
